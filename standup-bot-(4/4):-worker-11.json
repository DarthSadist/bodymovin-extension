{"createdAt":"2023-03-14T02:32:12.566Z","updatedAt":"2023-03-14T02:32:12.566Z","id":"11","name":"Standup bot (4/4): Worker","active":false,"nodes":[{"parameters":{"channelId":"={{$node[\"Prep Report\"].json[\"channel\"]}}","message":"={{$node[\"Prep Report\"].json[\"post\"]}}","attachments":[],"otherOptions":{}},"name":"publish report","type":"n8n-nodes-base.mattermost","position":[1700,900],"typeVersion":1,"id":"a119017d-fa88-4393-b830-c765e7f58383","credentials":{"mattermostApi":{"id":"2","name":"Mattermost account"}}},{"parameters":{"url":"={{$node[\"Read Config 2\"].json[\"config\"][\"mattermostBaseUrl\"]}}/api/v4/users/{{$node[\"Action from MM\"].json[\"body\"][\"user_id\"]}}","jsonParameters":true,"options":{},"headerParametersJson":"={\n\"Authorization\": \"Bearer {{$item(0).$node[\"Read Config 2\"].json[\"config\"][\"botUserToken\"]}}\"\n}"},"name":"get user data","type":"n8n-nodes-base.httpRequest","position":[1260,900],"typeVersion":1,"id":"1b4b4140-fb80-4fb8-8b14-2c9db3a9df0f"},{"parameters":{"conditions":{"string":[{"value1":"={{$node[\"Action from MM\"].json[\"body\"][\"context\"][\"action\"]}}","value2":"open-standup-dialog"}]}},"name":"open-standup-dialog?","type":"n8n-nodes-base.if","position":[1040,1120],"typeVersion":1,"id":"ce9a51e9-7bb4-4f50-bb1c-332c6f523353"},{"parameters":{"httpMethod":"POST","path":"standup-bot/action/f6f9b174745fa4651f750c36957d674c","options":{}},"name":"Action from MM","type":"n8n-nodes-base.webhook","position":[380,680],"webhookId":"6a28d86b-9f74-4825-9785-57e0d43b198f","typeVersion":1,"id":"a7a33d4e-b0a5-4398-8428-f6fb3cc82d30"},{"parameters":{"httpMethod":"POST","path":"standup-bot/slashCmd","options":{}},"name":"Slash Cmd from MM","type":"n8n-nodes-base.webhook","position":[380,460],"webhookId":"72732516-1143-430f-8465-d193fe657311","typeVersion":1,"id":"c0a8d07b-3eaa-42c3-b453-7bf916b5dbc0"},{"parameters":{"conditions":{"string":[{"value1":"={{$node[\"Slash Cmd from MM\"].json[\"body\"][\"text\"]}}","value2":"config"}]}},"name":"config?","type":"n8n-nodes-base.if","position":[600,460],"typeVersion":1,"id":"f00d5f79-2a68-4289-b584-aba49788c6e8"},{"parameters":{"requestMethod":"POST","url":"={{$node[\"Read Config 1\"].json[\"config\"][\"mattermostBaseUrl\"]}}/api/v4/actions/dialogs/open","jsonParameters":true,"options":{"bodyContentType":"json"},"bodyParametersJson":"={{$json}}"},"name":"open config dialog","type":"n8n-nodes-base.httpRequest","position":[1220,440],"typeVersion":1,"id":"e6d83679-c044-4960-b49c-6fad788009a4"},{"parameters":{"functionCode":"const channelId =\n  $item(0).$node['Slash Cmd from MM'].json['body']['channel_id'];\n\nconst configuredStandups =\n  $item(0).$node['Read Config 1'].json['standups'] ?? [];\n\nlet standup = configuredStandups.find(\n  (standup) => standup.channelId == channelId\n);\n\n// define default values:\nif (!standup) {\n  standup = {\n    title: 'Team Standup',\n    time: '09:00',\n    days: [1, 2, 3, 4, 5],\n    questions: [\n      'What have you accomplished since your last report?',\n      'What do you want to accomplish until your next report?',\n      'Is anything blocking your progress?',\n    ],\n    users: [],\n  };\n}\n\nconst payload = {\n  trigger_id: $item(0).$node['Slash Cmd from MM'].json['body']['trigger_id'],\n  url: $item(0).$node['Read Config 1'].json['config']['n8nWebhookUrl'],\n  dialog: {\n    callback_id: 'standup-config',\n    title: 'Standup Configuration',\n    submit_label: 'Save',\n    notify_on_cancel: false,\n    state: JSON.stringify({ standupId: channelId }),\n    elements: [\n      {\n        display_name: 'Standup title',\n        name: 'title',\n        type: 'text',\n        placeholder: 'Team Standup',\n        default: standup.title,\n        optional: true,\n        help_text:\n          'ðŸ’¡ The standup can be deleted by setting its title to an empty string!',\n      },\n      {\n        display_name: 'Time',\n        name: 'time',\n        type: 'select',\n        default: standup.time,\n        options: [\n          {\n            text: '06:00',\n            value: '06:00',\n          },\n          {\n            text: '07:00',\n            value: '07:00',\n          },\n          {\n            text: '08:00',\n            value: '08:00',\n          },\n          {\n            text: '09:00',\n            value: '09:00',\n          },\n          {\n            text: '10:00',\n            value: '10:00',\n          },\n          {\n            text: '11:00',\n            value: '11:00',\n          },\n          {\n            text: '12:00',\n            value: '12:00',\n          },\n          {\n            text: '13:00',\n            value: '13:00',\n          },\n          {\n            text: '14:00',\n            value: '14:00',\n          },\n          {\n            text: '15:00',\n            value: '15:00',\n          },\n          {\n            text: '16:00',\n            value: '16:00',\n          },\n          {\n            text: '17:00',\n            value: '17:00',\n          },\n        ],\n      },\n      {\n        display_name: 'Days',\n        name: 'days',\n        type: 'text',\n        placeholder: '1,2,3,4,5',\n        help_text:\n          'comma-separated; 0=Sun | 1=Mon | 2=Tue | 3=Wed | 4=Thu | 5=Fri | 6=Sat',\n        default: standup.days.join(','),\n      },\n      {\n        display_name: 'Questions',\n        name: 'questions',\n        type: 'textarea',\n        help_text: 'Max 5 questions, one question per line;',\n        default: standup.questions.join('\\n'),\n      },\n      {\n        display_name: 'Users',\n        name: 'users',\n        type: 'textarea',\n        help_text: 'One user per line',\n        default: standup.users.join('\\n'),\n      },\n    ],\n  },\n};\n\nreturn [{ json: payload }];\n\n"},"name":"Prep Config Dialog","type":"n8n-nodes-base.function","position":[1020,440],"typeVersion":1,"id":"9e148c02-71a7-4755-b56a-fdba293bbb89"},{"parameters":{"dataType":"string","value1":"={{$node[\"Action from MM\"].json[\"body\"][\"callback_id\"]}}","rules":{"rules":[{"value2":"standup-config"},{"value2":"standup-answers","output":1}]},"fallbackOutput":3},"name":"callback ID?","type":"n8n-nodes-base.switch","position":[820,680],"typeVersion":1,"id":"24cb2124-6b19-4667-8298-30d34e8624c5"},{"parameters":{},"name":"standup-config","type":"n8n-nodes-base.noOp","position":[1040,680],"typeVersion":1,"id":"91797c5a-3418-4f19-a67a-6eae6cc87388"},{"parameters":{},"name":"standup-answers","type":"n8n-nodes-base.noOp","position":[1040,900],"typeVersion":1,"id":"55f0dfaf-39d2-472c-86a0-16a929147b27"},{"parameters":{"functionCode":"const mattermostInput = $item(0).$node['Action from MM'].json['body'];\nconst config = $item(0).$node['Read Config 2'].json;\n\n// ensure there is a \"standups\" array:\nconfig['standups'] = config['standups'] ?? [];\n\n// remove the standup from the list:\nconfig['standups'] = config['standups'].filter(\n  (standup) => standup.channelId != mattermostInput.channel_id\n);\n\nconst textToArray = (text, separator) => {\n  return text\n    .split(separator)\n    .map((e) => e.trim())\n    .filter((e) => e.length > 0);\n};\n\n// a standup can be deleted by updating its title to \"\"\nif (mattermostInput.submission.title.length > 0) {\n  const newStandup = {\n    channelId: mattermostInput.channel_id,\n    title: mattermostInput.submission.title,\n    time: mattermostInput.submission.time,\n    days: textToArray(mattermostInput.submission.days, ',').map((e) =>\n      parseInt(e)\n    ),\n    users: textToArray(mattermostInput.submission.users, '\\n'),\n    questions: textToArray(mattermostInput.submission.questions, '\\n'),\n  };\n\n  config['standups'].push(newStandup);\n}\n\nreturn [{ json: config }];\n\n"},"name":"Prep Config Override","type":"n8n-nodes-base.function","position":[1260,680],"typeVersion":1,"id":"ce208684-8235-41ed-92ad-4e5ba335bc6e"},{"parameters":{"workflowId":"1005"},"name":"Override Config","type":"n8n-nodes-base.executeWorkflow","position":[1480,680],"typeVersion":1,"id":"50e571bd-e338-4acb-8def-dd9605b5fbee"},{"parameters":{"workflowId":"1004"},"name":"Read Config 1","type":"n8n-nodes-base.executeWorkflow","position":[820,440],"typeVersion":1,"id":"73cd5dcd-8a88-4069-b173-de66b86774b7"},{"parameters":{"workflowId":"1004"},"name":"Read Config 2","type":"n8n-nodes-base.executeWorkflow","position":[600,680],"typeVersion":1,"id":"104329b6-f740-4314-8c0f-e0b48abdf496"},{"parameters":{"operation":"postEphemeral","userId":"={{$node[\"Action from MM\"].json[\"body\"][\"user_id\"]}}","channelId":"={{$node[\"Action from MM\"].json[\"body\"][\"channel_id\"]}}","message":"new standup config was saved successfully"},"name":"confirm success","type":"n8n-nodes-base.mattermost","position":[1700,680],"typeVersion":1,"id":"72a8a0d2-b880-438a-b390-9cf1f0de45ed","credentials":{"mattermostApi":{"id":"2","name":"Mattermost account"}}},{"parameters":{"workflowId":"1004"},"name":"Read Config 3","type":"n8n-nodes-base.executeWorkflow","position":[600,240],"typeVersion":1,"id":"ee0e24d3-0271-44c9-a161-9e9c16fea2dc"},{"parameters":{"functionCode":"const config = $item(0).$node['Read Config 3'].json;\n\n// ensure there is a \"standups\" array:\nconfig['standups'] = config['standups'] ?? [];\n\nconst now = new Date();\nconst duePattern = `${now.getDay()}_${now\n  .getHours()\n  .toString()\n  .padStart(2, '0')}:00`; // e.g. 1_13:00 => Monday 1 p.m.\n  \nconsole.log(duePattern);\n\n// filter standups that are due now:\nconst dueStandups = config.standups.filter((standup) =>\n  //true\n  standup.days.map((day) => `${day}_${standup.time}`).includes(duePattern)\n);\n\nreturn dueStandups.map((standup) => ({\n  json: standup,\n}));\n\n"},"name":"Filter Due Standups","type":"n8n-nodes-base.function","position":[820,240],"typeVersion":1,"id":"c2fdbafa-79fc-4d1a-b03a-006e7ecdbc7f"},{"parameters":{"functionCode":"const reminders = items.reduce((prev, curr) => {\n  return prev.concat(\n    curr.json.users.map((user) => ({\n      channelId: curr.json.channelId,\n      title: curr.json.title,\n      user: user,\n    }))\n  );\n}, []);\n\nreturn reminders.map((reminder) => ({\n  json: reminder,\n}));\n"},"name":"Prep Request Standup","type":"n8n-nodes-base.function","position":[1040,240],"typeVersion":1,"id":"d18ed1cd-2f72-4d3e-bbde-2ee1203d1e32"},{"parameters":{"requestMethod":"POST","url":"={{$item(0).$node[\"Read Config 3\"].json[\"config\"][\"mattermostBaseUrl\"]}}/api/v4/channels/direct","jsonParameters":true,"options":{},"bodyParametersJson":"=[\"{{$node[\"Get User\"].json[\"id\"]}}\", \"{{$item(0).$node[\"Read Config 3\"].json[\"config\"][\"botUserId\"]}}\"]","headerParametersJson":"={\n  \"Authorization\": \"Bearer {{$item(0).$node[\"Read Config 3\"].json[\"config\"][\"botUserToken\"]}}\"\n}"},"name":"Create Channel","type":"n8n-nodes-base.httpRequest","position":[1480,240],"typeVersion":1,"id":"ebf25375-f7d7-4011-bedf-3ef7316c03a7"},{"parameters":{"requestMethod":"POST","url":"={{$item(0).$node[\"Read Config 3\"].json[\"config\"][\"mattermostBaseUrl\"]}}/api/v4/posts","jsonParameters":true,"options":{},"bodyParametersJson":"={{$json}}","headerParametersJson":"={\n\"Authorization\": \"Bearer {{$item(0).$node[\"Read Config 3\"].json[\"config\"][\"botUserToken\"]}}\"\n}"},"name":"Remind Users","type":"n8n-nodes-base.httpRequest","position":[1920,240],"typeVersion":1,"id":"75fefd0f-1fc1-4319-b88a-5e637b505408"},{"parameters":{"url":"={{$item(0).$node[\"Read Config 3\"].json[\"config\"][\"mattermostBaseUrl\"]}}/api/v4/users/username/{{$node[\"Prep Request Standup\"].json[\"user\"]}}","jsonParameters":true,"options":{},"headerParametersJson":"={\n  \"Authorization\": \"Bearer {{$item(0).$node[\"Read Config 3\"].json[\"config\"][\"botUserToken\"]}}\"\n}"},"name":"Get User","type":"n8n-nodes-base.httpRequest","position":[1260,240],"typeVersion":1,"id":"2a801ea7-780c-4118-9ea0-ba0ce665f6f0","continueOnFail":true},{"parameters":{"functionCode":"const webhookUrl =\n  $item(0).$node['Read Config 3'].json['config']['n8nWebhookUrl']; // e.g. https://xyz.app.n8n.cloud/webhook-test/standup-bot/action/top-secret-api-key\n\nconst botUserToken =\n  $item(0).$node['Read Config 3'].json['config']['botUserToken'];\n\nlet itemIndex = 0;\n\nfor (item of items) {\n  const directChannelId = item.json.id;\n\n  const payload = {\n    channel_id: directChannelId,\n    props: {\n      attachments: [\n        {\n          pretext: \"Hi there! It's time for standup!\",\n          text: `Please provide your input for: **${\n            $item(itemIndex).$node['Prep Request Standup'].json['title']\n          }**`,\n          actions: [\n            {\n              id: webhookUrl.includes('test') ? 'webhook-test' : 'webhook',\n              name: 'Provide Update',\n              integration: {\n                url: webhookUrl,\n                context: {\n                  action: 'open-standup-dialog',\n                  secret: botUserToken, // not ideal but good enough for now...\n                  standupId:\n                    $item(itemIndex).$node['Prep Request Standup'].json[\n                      'channelId'\n                    ],\n                },\n              },\n            },\n          ],\n        },\n      ],\n    },\n  };\n\n  item.json = payload;\n\n  itemIndex++;\n}\n\nreturn items;\n\n"},"name":"Prep Reminder","type":"n8n-nodes-base.function","position":[1700,240],"typeVersion":1,"id":"cd6c46e4-61bc-4826-9308-647fb572daed"},{"parameters":{"functionCode":"const standupId =\n  $item(0).$node['Action from MM'].json['body']['context']['standupId'];\n\nconst postId = $item(0).$node['Action from MM'].json['body']['post_id'];\n\nconst configuredStandups =\n  $item(0).$node['Read Config 2'].json['standups'] ?? [];\n\nlet standup = configuredStandups.find(\n  (standup) => (standup.channelId == standupId)\n);\n\nconst renderQuestions = (questions) => {\n  let questionId = 1;\n\n  return questions.map((question) => ({\n    display_name: question,\n    name: `q${questionId++}`,\n    type: 'textarea',\n  }));\n};\n\nconst payload = {\n  trigger_id: $item(0).$node['Action from MM'].json['body']['trigger_id'],\n  url: $item(0).$node['Read Config 2'].json['config']['n8nWebhookUrl'],\n  dialog: {\n    callback_id: 'standup-answers',\n    title: `Report for: ${standup.title}`,\n    submit_label: 'Submit',\n    notify_on_cancel: false,\n    state: JSON.stringify({ standupId, reminderPostId: postId }),\n    elements: renderQuestions(standup.questions),\n  },\n};\n\nreturn [{ json: payload }];\n"},"name":"Prep Standup Dialog","type":"n8n-nodes-base.function","position":[1260,1100],"typeVersion":1,"id":"bbed0ebf-21fa-48f5-b0e1-b99245278c6f"},{"parameters":{"requestMethod":"POST","url":"={{$node[\"Read Config 2\"].json[\"config\"][\"mattermostBaseUrl\"]}}/api/v4/actions/dialogs/open","jsonParameters":true,"options":{"bodyContentType":"json"},"bodyParametersJson":"={{$json}}"},"name":"open standup dialog","type":"n8n-nodes-base.httpRequest","position":[1460,1100],"typeVersion":1,"id":"ee97695d-11ee-41da-a82a-a86531969991"},{"parameters":{"functionCode":"const { standupId, reminderPostId } = JSON.parse(\n  $item(0).$node['Action from MM'].json['body']['state']\n);\nconst submission = $item(0).$node['Action from MM'].json['body']['submission'];\n\nconst configuredStandups = $item(0).$node['Read Config 2'].json['standups'];\n\nconst standup = configuredStandups.find(\n  (standup) => standup.channelId == standupId\n);\n\nconst emptyAnswers = [\n  '-',\n  '/',\n  ' ',\n  'x',\n  'n/a',\n  'nope',\n  'nopes',\n  'no',\n  'none',\n  'no.',\n  'nothing',\n];\n\nfunction capitalize(text) {\n  return text.charAt(0).toUpperCase() + text.slice(1);\n}\n\nconst renderPost = (submission, standup) => {\n  let postText = `### ${capitalize(\n    $item(0).$node['get user data'].json['username']\n  )}\\n`;\n\n  let questionIndex = 0;\n\n  postText += standup.questions\n    .map((question) => {\n      questionIndex++;\n\n      if (\n        !submission[`q${questionIndex}`] ||\n        emptyAnswers.includes(submission[`q${questionIndex}`].toLowerCase())\n      ) {\n        return '';\n      }\n\n      return `#### ${question}\\n${submission[`q${questionIndex}`]}`;\n    })\n    .join('\\n');\n\n  return postText;\n};\n\nreturn [\n  {\n    json: {\n      post: renderPost(submission, standup),\n      channel: standupId,\n      reminderPostId,\n      standupTitle: standup.title,\n    },\n  },\n];\n\n"},"name":"Prep Report","type":"n8n-nodes-base.function","position":[1480,900],"typeVersion":1,"id":"de7c5436-8b83-445e-b22e-e7caea839da5"},{"parameters":{"operation":"delete","postId":"={{$node[\"Prep Report\"].json[\"reminderPostId\"]}}"},"name":"Delete ReminderPost","type":"n8n-nodes-base.mattermost","position":[2140,900],"typeVersion":1,"id":"72e45c64-c685-46fa-9033-fc5511f2743e","credentials":{"mattermostApi":{"id":"2","name":"Mattermost account"}}},{"parameters":{"requestMethod":"PUT","url":"={{$node[\"Read Config 2\"].json[\"config\"][\"mattermostBaseUrl\"]}}/api/v4/posts/{{$node[\"Prep Report\"].json[\"reminderPostId\"]}}","jsonParameters":true,"options":{},"bodyParametersJson":"={\n\"id\":\"{{$node[\"Prep Report\"].json[\"reminderPostId\"]}}\",\n\"message\": \"Thank you for providing your report for {{$node[\"Prep Report\"].json[\"standupTitle\"]}}\"\n}","headerParametersJson":"={\n\"Content-Type\":\"application/json\",\n\"Authorization\": \"Bearer {{$item(0).$node[\"Read Config 2\"].json[\"config\"][\"botUserToken\"]}}\"\n}"},"name":"Update Post","type":"n8n-nodes-base.httpRequest","position":[1920,900],"typeVersion":1,"id":"189f8985-93f5-4fbb-864b-0138c43f09d0"},{"parameters":{"triggerTimes":{"item":[{"mode":"custom","cronExpression":"0 0 6-12 * * 1-5"}]}},"name":"Every hour","type":"n8n-nodes-base.cron","position":[380,240],"typeVersion":1,"id":"e0f29406-7793-4cfc-9e86-eb2c85d3ee3f"}],"connections":{"config?":{"main":[[{"node":"Read Config 1","type":"main","index":0}]]},"Get User":{"main":[[{"node":"Create Channel","type":"main","index":0}]]},"Every hour":{"main":[[{"node":"Read Config 3","type":"main","index":0}]]},"Prep Report":{"main":[[{"node":"publish report","type":"main","index":0}]]},"callback ID?":{"main":[[{"node":"standup-config","type":"main","index":0}],[{"node":"standup-answers","type":"main","index":0}],[],[{"node":"open-standup-dialog?","type":"main","index":0}]]},"Prep Reminder":{"main":[[{"node":"Remind Users","type":"main","index":0}]]},"Read Config 1":{"main":[[{"node":"Prep Config Dialog","type":"main","index":0}]]},"Read Config 2":{"main":[[{"node":"callback ID?","type":"main","index":0}]]},"Read Config 3":{"main":[[{"node":"Filter Due Standups","type":"main","index":0}]]},"get user data":{"main":[[{"node":"Prep Report","type":"main","index":0}]]},"Action from MM":{"main":[[{"node":"Read Config 2","type":"main","index":0}]]},"Create Channel":{"main":[[{"node":"Prep Reminder","type":"main","index":0}]]},"publish report":{"main":[[{"node":"Update Post","type":"main","index":0}]]},"standup-config":{"main":[[{"node":"Prep Config Override","type":"main","index":0}]]},"Override Config":{"main":[[{"node":"confirm success","type":"main","index":0}]]},"standup-answers":{"main":[[{"node":"get user data","type":"main","index":0}]]},"Slash Cmd from MM":{"main":[[{"node":"config?","type":"main","index":0}]]},"Prep Config Dialog":{"main":[[{"node":"open config dialog","type":"main","index":0}]]},"Filter Due Standups":{"main":[[{"node":"Prep Request Standup","type":"main","index":0}]]},"Prep Standup Dialog":{"main":[[{"node":"open standup dialog","type":"main","index":0}]]},"Prep Config Override":{"main":[[{"node":"Override Config","type":"main","index":0}]]},"Prep Request Standup":{"main":[[{"node":"Get User","type":"main","index":0}]]},"open-standup-dialog?":{"main":[[{"node":"Prep Standup Dialog","type":"main","index":0}]]}},"settings":{},"staticData":null,"meta":null,"pinData":{},"versionId":"bf79140b-5408-46d1-ad39-9b07d740d188","triggerCount":0,"tags":[]}